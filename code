
rm(list=ls(all=TRUE))
library(BART)
library(ggplot2)
library(purrr)

setwd("/Users/Ang/Desktop/Courses/Wisconsin/Bayesian statistics/Final project")

data <- readRDS(paste("/Users/Ang/Desktop/Research/Causal_decomposition/Data/data_imputed.",1,".rds", sep = ""))

# convert all factor variables to numeric 
data$gender <- as.numeric(data$gender)-1

data$parental_presence <- as.numeric(data$parental_presence)-1

data$n_sib <- as.numeric(data$n_sib)-1

data$urban <- as.numeric(data$urban)-1

data$edu_exp <- as.numeric(data$edu_exp)-2
data$edu_exp[data$edu_exp==-1] <- 0

data$age <- as.numeric(data$age)-1

data$friend_edu_exp <- as.numeric(data$friend_edu_exp)-2
data$friend_edu_exp[data$friend_edu_exp==-1] <- 0

data$sig_other_exp1 <- NA
data$sig_other_exp1[data$sig_other_expec==1 & !is.na(data$sig_other_expec)] <- 1
data$sig_other_exp1[data$sig_other_expec!=1 & !is.na(data$sig_other_expec)] <- 0
data$sig_other_exp2 <- NA
data$sig_other_exp2[data$sig_other_expec==2 & !is.na(data$sig_other_expec)] <- 1
data$sig_other_exp2[data$sig_other_expec!=2 & !is.na(data$sig_other_expec)] <- 0
data$sig_other_exp3 <- NA
data$sig_other_exp3[data$sig_other_expec==3 & !is.na(data$sig_other_expec)] <- 1
data$sig_other_exp3[data$sig_other_expec!=3 & !is.na(data$sig_other_expec)] <- 0
data$sig_other_exp4 <- NA
data$sig_other_exp4[data$sig_other_expec==4 & !is.na(data$sig_other_expec)] <- 1
data$sig_other_exp4[data$sig_other_expec!=4 & !is.na(data$sig_other_expec)] <- 0

data$foreign_lang <- as.numeric(data$foreign_lang)-1

data$SMSA1 <- NA
data$SMSA1[data$SMSA==0 & !is.na(data$SMSA)] <- 1
data$SMSA1[data$SMSA!=0 & !is.na(data$SMSA)] <- 0
data$SMSA2 <- NA
data$SMSA2[data$SMSA==1 & !is.na(data$SMSA)] <- 1
data$SMSA2[data$SMSA!=1 & !is.na(data$SMSA)] <- 0
data$SMSA3 <- NA
data$SMSA3[data$SMSA==2 & !is.na(data$SMSA)] <- 1
data$SMSA3[data$SMSA!=2 & !is.na(data$SMSA)] <- 0
data$SMSA4 <- NA
data$SMSA4[data$SMSA==3 & !is.na(data$SMSA)] <- 1
data$SMSA4[data$SMSA!=3 & !is.na(data$SMSA)] <- 0

data$foreign_lang <- as.numeric(data$foreign_lang)-1

data$mother_seperate <- as.numeric(data$mother_seperate)-1

data$college_prep <- as.numeric(data$college_prep)-1

data$school_satis1 <- NA
data$school_satis1[(data$school_satisfaction==1 | data$school_satisfaction==2) & !is.na(data$school_satisfaction)] <- 1
data$school_satis1[data$school_satisfaction!=1 & data$school_satisfaction!=2 & !is.na(data$school_satisfaction)] <- 0
data$school_satis2 <- NA
data$school_satis2[data$school_satisfaction==3 & !is.na(data$school_satisfaction)] <- 1
data$school_satis2[data$school_satisfaction!=3 & !is.na(data$school_satisfaction)] <- 0
data$school_satis3 <- NA
data$school_satis3[data$school_satisfaction==4 & !is.na(data$school_satisfaction)] <- 1
data$school_satis3[data$school_satisfaction!=4 & !is.na(data$school_satisfaction)] <- 0

data$fm_foreign_born <- NA
data$fm_foreign_born[(data$f_foreign_born==2 | data$m_foreign_born==2) & !is.na(data$f_foreign_born) & !is.na(data$m_foreign_born)] <- 1
data$fm_foreign_born[(data$f_foreign_born==1 | data$m_foreign_born==1) & !is.na(data$f_foreign_born) & !is.na(data$m_foreign_born)] <- 0

data$region1 <- NA
data$region1[data$region==1 & !is.na(data$region)] <- 1
data$region1[data$region!=1 & !is.na(data$region)] <- 0
data$region2 <- NA
data$region2[data$region==2 & !is.na(data$region)] <- 1
data$region2[data$region!=2 & !is.na(data$region)] <- 0
data$region3 <- NA
data$region3[data$region==3 & !is.na(data$region)] <- 1
data$region3[data$region!=3 & !is.na(data$region)] <- 0
data$region4 <- NA
data$region4[data$region==4 & !is.na(data$region)] <- 1
data$region4[data$region!=4 & !is.na(data$region)] <- 0

data$m_work <- as.numeric(data$m_work)-1

data$race1 <- NA
data$race1[data$race=="Other" & !is.na(data$race)] <- 1
data$race1[data$race!="Other" & !is.na(data$race)] <- 0
data$race2 <- NA
data$race2[data$race=="Black" & !is.na(data$race)] <- 1
data$race2[data$race!="Black" & !is.na(data$race)] <- 0
data$race3 <- NA
data$race3[data$race=="Hispanic" & !is.na(data$race)] <- 1
data$race3[data$race!="Hispanic" & !is.na(data$race)] <- 0

data$college <- as.numeric(data$college)-1

set.seed(1)



X <- data[, c("parental_income_log",
              "AFQT","rotter_score","rosenberg_irt_score",   # continous X's
              "urban","gender","parental_presence","fm_foreign_born",  # binary X's 
              "age","n_sib","medu","fedu","edu_exp","friend_edu_exp",
              "sig_other_exp1","sig_other_exp2","sig_other_exp3","sig_other_exp4","foreign_lang",
              "SMSA1","SMSA2","SMSA3","SMSA4","mother_seperate","college_prep",
              "school_satis1","school_satis2","school_satis3",
              "region1","region2","region3","region4","m_work","race1","race2","race3")]

X <- as.matrix(X)
colnames(X)

# Number of MC repetitions
K <- 1000
# Number of posterior BART draws
M <- 1000
# Number of fixed G values
Q <- 200

# get fixed G values for prediction
hist(data$parental_income_log)
G_values <- seq(quantile(data$parental_income_log, c(0.05, 0.95))[1], quantile(data$parental_income_log, c(0.05, 0.95))[2], length.out=Q)

### X given G
# continous X
Model.XgivenG_1 <- wbart(x.train=as.matrix(X[,colnames(X)%in%"parental_income_log"]), y.train=X[,colnames(X)%in%"AFQT"], ndpost=K)
Model.XgivenG_2 <- wbart(x.train=as.matrix(X[,colnames(X)%in%"parental_income_log"]), y.train=X[,colnames(X)%in%"rotter_score"], ndpost=K)
Model.XgivenG_3 <- wbart(x.train=as.matrix(X[,colnames(X)%in%"parental_income_log"]), y.train=X[,colnames(X)%in%"rosenberg_irt_score"], ndpost=K)

# binary X
Model.XgivenG_4 <- pbart(x.train=as.matrix(X[,colnames(X)%in%"parental_income_log"]), y.train=X[,colnames(X)%in%"urban"], ndpost=K)
Model.XgivenG_5 <- pbart(x.train=as.matrix(X[,colnames(X)%in%"parental_income_log"]), y.train=X[,colnames(X)%in%"gender"], ndpost=K)
Model.XgivenG_6 <- pbart(x.train=as.matrix(X[,colnames(X)%in%"parental_income_log"]), y.train=X[,colnames(X)%in%"parental_presence"], ndpost=K)
Model.XgivenG_7 <- pbart(x.train=as.matrix(X[,colnames(X)%in%"parental_income_log"]), y.train=X[,colnames(X)%in%"fm_foreign_born"], ndpost=K)


Pred.XgivenG_1 <- predict(Model.XgivenG_1, as.matrix(G_values))
Pred.XgivenG_2 <- predict(Model.XgivenG_2, as.matrix(G_values))
Pred.XgivenG_3 <- predict(Model.XgivenG_3, as.matrix(G_values))
Pred.XgivenG_4 <- rbernoulli(n=K*Q, p=predict(Model.XgivenG_4, as.matrix(G_values))$"prob.test")*1  # *1 to turn TRUE/FALSE to 1/0
Pred.XgivenG_5 <- rbernoulli(n=K*Q, p=predict(Model.XgivenG_5, as.matrix(G_values))$"prob.test")*1 
Pred.XgivenG_6 <- rbernoulli(n=K*Q, p=predict(Model.XgivenG_6, as.matrix(G_values))$"prob.test")*1 
Pred.XgivenG_7 <- rbernoulli(n=K*Q, p=predict(Model.XgivenG_7, as.matrix(G_values))$"prob.test")*1 


### Y given X
Model.YgivenX <- wbart(x.train=X[,1:8], y.train=data[,colnames(data) %in% "adult_income_log"], ndpost=M)
Pred.YgivenX <- lapply(1:Q, function(x){
  predict(Model.YgivenX, cbind(G_values[x], Pred.XgivenG_1[,x], Pred.XgivenG_2[,x], Pred.XgivenG_3[,x], 
                               Pred.XgivenG_4[,x], Pred.XgivenG_5[,x], Pred.XgivenG_6[,x], Pred.XgivenG_7[,x]))
  })

### Summarize the results over MC draws 
Over_MC <- lapply(1:Q, function(x) {
  mean_MC_x <- rowMeans(Pred.YgivenX[[x]]) # This takes average over MC draws within each BART posterior draw and each G value
  sd_MC <- rowSums((Pred.YgivenX[[x]] - mean_MC_x)^2/(K*(K-1)))
  return(list(mean_MC_x, sd_MC))
  })

### Measuring MC variation
mean_sd_MC <- sapply(1:Q, function(x) {
  mean(Over_MC[[x]][[2]])   # mean sd_MC over BART draws and within a G value
})
summary(mean_sd_MC)  # This is the measure of MC variation


var_draw <- sapply(1:Q, function(x) {
  var(Over_MC[[x]][[1]])   # sample variance over BART draws and within a G value
})
mean_sd_MC/var_draw # MC variation relative to posterior variance for each G value
mean(mean_sd_MC)  # take average over G values. This is an overall measure of MC variation. 
# And it is generic in the sense that it does not depend on specific parametrization of E(Y_1|G)

### get M number of E(Y_1|G)
Y_1G <- lapply(1:M, function(x) {  # xth element of the list stores Q values of E(Y_1|G) for the xth posterior draw
  sapply(1:Q, function(y) {   # Y as a function of G for xth posterior draw
    Over_MC[[y]][[1]][x] # The first index is for G value, the second for mean_MC vs sd_MC, the third for posterior draw
  })
})

### Summarize the results over BART draws
Y_1G_dist <- lapply(1:Q, function(x) {  
  ave <- mean(Over_MC[[x]][[1]])   # mean over BART draws for the xth G value
  inter <- quantile(Over_MC[[x]][[1]], probs=c(0.025, 0.975))
  return(c(ave, inter))
})

Y_1G_dist[[1]]

### Parametric summaries
## linear parametrization
linear <- t(as.data.frame(lapply(1:M, function(x) {
    coef(lm(Y_1G[[x]] ~ G_values))
  }), col.names=1:M, row.names=c("intercept","slope")) )

ggdata <- as.data.frame(cbind(G_values, seq(min(sapply(Y_1G, min)), max(sapply(Y_1G, max)), length.out=Q)))
colnames(ggdata) <- c("x","y")

linear_plot <- ggplot(data=ggdata, aes(x=x,y=y)) +
  geom_point(alpha=0) +
  geom_abline(intercept=linear[1:250,1],slope=linear[1:250,2], alpha=0.1)  # only plot the first 250 draws to make the graph look better. 


## quadratic parametrization
G_values_sqr <- G_values^2
quadratic <- t(as.data.frame(lapply(1:M, function(x) {
  coef(lm(Y_1G[[x]] ~ G_values + G_values_sqr))
}), col.names=1:M, row.names=c("intercept","slope1","slope2")) )


# Note that when iteratively adding geom_function, I need to use the `map' function from purrr package. 
# For loops don't work. See https://community.rstudio.com/t/plotting-multiple-function-curves-in-a-single-plot-using-ggplot-in-a-user-defined-function/92061/6
quar_plot <- ggplot() + xlim(min(sapply(Y_1G, min)), max(sapply(Y_1G, max))) 
add <- function(y) { geom_function(fun=function(x) 
  {
  coef(lm(Y_1G[[y]] ~ G_values + G_values_sqr))[1] + coef(lm(Y_1G[[y]] ~ G_values + G_values_sqr))[2]*x + coef(lm(Y_1G[[y]] ~ G_values + G_values_sqr))[3]*x^2
  }, alpha=0.1)
}
quar_plot <- quar_plot + map(1:250, add)
quar_plot



