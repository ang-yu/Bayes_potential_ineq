
rm(list=ls(all=TRUE))
library(BART)
library(ggplot2)
library(purrr)

setwd("/Users/Ang/Desktop/Courses/Wisconsin/Bayesian statistics/Final project")
data <- readRDS(paste("/Users/Ang/Desktop/Research/Causal_decomposition/Data/data_imputed.",1,".rds", sep = ""))

# recode all binary X to numeric
data$gender <- as.numeric(data$gender)-1
data$urban <- as.numeric(data$urban)-1
data$parental_presence <- as.numeric(data$parental_presence)-1
data$f_foreign_born <- as.numeric(data$f_foreign_born)-1
data$m_foreign_born <- as.numeric(data$m_foreign_born)-1
data$mother_seperate <- as.numeric(data$mother_seperate)-1
data$college_prep <- as.numeric(data$college_prep)-1
data$college <- as.numeric(data$college)-1
data$m_work <- as.numeric(data$m_work)-1

# keep factor variables as factor in the X matrix, which will be used for outcome modelling
X <- data[, c("parental_income_log","college",
              "AFQT","rotter_score","rosenberg_irt_score","medu","fedu",   # continuous X's
              "urban","gender","parental_presence","f_foreign_born","m_foreign_born","college_prep","mother_seperate","m_work",  # binary X's 
              "age","n_sib","edu_exp","friend_edu_exp", "sig_other_expec","SMSA","school_satisfaction","region","race")]  # factor X's
X <- as.matrix(X)
colnames(X)

# make factor variables numeric, for modelling f(X|G)
data$age <- as.numeric(data$age)
data$n_sib <- as.numeric(data$n_sib)
data$edu_exp <- as.numeric(data$edu_exp)
data$friend_edu_exp <- as.numeric(data$friend_edu_exp)
data$m_foreign_born <- as.numeric(data$m_foreign_born)
data$sig_other_expec <- as.numeric(data$sig_other_expec)
data$SMSA <- as.numeric(data$SMSA)
data$school_satisfaction <- as.numeric(data$school_satisfaction)
data$region <- as.numeric(data$region)
data$race <- as.numeric(data$race)

# Number of MC repetitions
K <- 1000
# Number of posterior BART draws
M <- 1000
# Number of fixed G values
Q <- 200

# get fixed G values for prediction
hist(data$parental_income_log)
G_values <- seq(quantile(data$parental_income_log, c(0.05, 0.95))[1], quantile(data$parental_income_log, c(0.05, 0.95))[2], length.out=Q)

set.seed(1)

### X given G
# continous X
Model.XgivenG_1 <- wbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"AFQT"], ndpost=K)
Model.XgivenG_2 <- wbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"rotter_score"], ndpost=K)
Model.XgivenG_3 <- wbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"rosenberg_irt_score"], ndpost=K)
Model.XgivenG_4 <- wbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"medu"], ndpost=K)
Model.XgivenG_5 <- wbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"fedu"], ndpost=K)

# binary X
Model.XgivenG_6 <- pbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"urban"], ndpost=K)
Model.XgivenG_7 <- pbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"gender"], ndpost=K)
Model.XgivenG_8 <- pbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"parental_presence"], ndpost=K)
Model.XgivenG_9 <- pbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"f_foreign_born"], ndpost=K)
Model.XgivenG_10 <- pbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"m_foreign_born"], ndpost=K)
Model.XgivenG_11 <- pbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"college_prep"], ndpost=K)
Model.XgivenG_12 <- pbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"mother_seperate"], ndpost=K)
Model.XgivenG_13 <- pbart(x.train=as.matrix(data[,colnames(data)%in%"parental_income_log"]), y.train=data[,colnames(data)%in%"m_work"], ndpost=K)

# multinomial X
L <- length(X[,colnames(X)%in%c("parental_income_log")])
Model.XgivenG_14 <- mbart(x.train=cbind(X[,colnames(X)%in%c("parental_income_log")], rep(1,L)), y.train=as.integer(X[,colnames(X)%in%"age"]), ndpost=K, rm.const=FALSE)
Model.XgivenG_15 <- mbart(x.train=cbind(X[,colnames(X)%in%c("parental_income_log")], rep(1,L)), y.train=as.integer(X[,colnames(X)%in%"n_sib"]), ndpost=K, rm.const=FALSE)
Model.XgivenG_16 <- mbart(x.train=cbind(X[,colnames(X)%in%c("parental_income_log")], rep(1,L)), y.train=as.integer(X[,colnames(X)%in%"edu_exp"]), ndpost=K, rm.const=FALSE)
Model.XgivenG_17 <- mbart(x.train=cbind(X[,colnames(X)%in%c("parental_income_log")], rep(1,L)), y.train=as.integer(X[,colnames(X)%in%"friend_edu_exp"]), ndpost=K, rm.const=FALSE)
Model.XgivenG_18 <- mbart(x.train=cbind(X[,colnames(X)%in%c("parental_income_log")], rep(1,L)), y.train=as.integer(X[,colnames(X)%in%"sig_other_expec"]), ndpost=K, rm.const=FALSE)
Model.XgivenG_19 <- mbart(x.train=cbind(X[,colnames(X)%in%c("parental_income_log")], rep(1,L)), y.train=as.integer(X[,colnames(X)%in%"SMSA"]), ndpost=K, rm.const=FALSE)
Model.XgivenG_20 <- mbart(x.train=cbind(X[,colnames(X)%in%c("parental_income_log")], rep(1,L)), y.train=as.integer(X[,colnames(X)%in%"school_satisfaction"]), ndpost=K, rm.const=FALSE)
Model.XgivenG_21 <- mbart(x.train=cbind(X[,colnames(X)%in%c("parental_income_log")], rep(1,L)), y.train=as.integer(X[,colnames(X)%in%"region"]), ndpost=K, rm.const=FALSE)
Model.XgivenG_22 <- mbart(x.train=cbind(X[,colnames(X)%in%c("parental_income_log")], rep(1,L)), y.train=as.integer(X[,colnames(X)%in%"race"]), ndpost=K, rm.const=FALSE)

# predictions
Pred.XgivenG_1 <- predict(Model.XgivenG_1, as.matrix(G_values))
Pred.XgivenG_2 <- predict(Model.XgivenG_2, as.matrix(G_values))
Pred.XgivenG_3 <- predict(Model.XgivenG_3, as.matrix(G_values))
Pred.XgivenG_4 <- predict(Model.XgivenG_4, as.matrix(G_values))
Pred.XgivenG_5 <- predict(Model.XgivenG_5, as.matrix(G_values))
Pred.XgivenG_6 <- rbernoulli(n=K*Q, p=predict(Model.XgivenG_6, as.matrix(G_values))$"prob.test")*1  # *1 to turn TRUE/FALSE to 1/0
Pred.XgivenG_7 <- rbernoulli(n=K*Q, p=predict(Model.XgivenG_7, as.matrix(G_values))$"prob.test")*1 
Pred.XgivenG_8 <- rbernoulli(n=K*Q, p=predict(Model.XgivenG_8, as.matrix(G_values))$"prob.test")*1 
Pred.XgivenG_9 <- rbernoulli(n=K*Q, p=predict(Model.XgivenG_9, as.matrix(G_values))$"prob.test")*1 
Pred.XgivenG_10 <- rbernoulli(n=K*Q, p=predict(Model.XgivenG_10, as.matrix(G_values))$"prob.test")*1  
Pred.XgivenG_11 <- rbernoulli(n=K*Q, p=predict(Model.XgivenG_11, as.matrix(G_values))$"prob.test")*1 
Pred.XgivenG_12 <- rbernoulli(n=K*Q, p=predict(Model.XgivenG_12, as.matrix(G_values))$"prob.test")*1 
Pred.XgivenG_13 <- rbernoulli(n=K*Q, p=predict(Model.XgivenG_13, as.matrix(G_values))$"prob.test")*1 


probs <- predict(Model.XgivenG_14, cbind(G_values, rep(1,Q)))$"prob.test"
f <- function(x,y) rmultinom(n=1, size=1, prob=probs[y,((x-1)*4+1):(x*4)])
Pred.XgivenG_14 <-sapply(1:Q, function(x) sapply(1:K, function(y) f(x,y)))

probs <- predict(Model.XgivenG_15, cbind(G_values, rep(1,Q)))$"prob.test"
f <- function(x,y) rmultinom(n=1, size=1, prob=probs[y,((x-1)*7+1):(x*7)])
Pred.XgivenG_15 <-sapply(1:Q, function(x) sapply(1:K, function(y) f(x,y)))

probs <- predict(Model.XgivenG_16, cbind(G_values, rep(1,Q)))$"prob.test"
f <- function(x,y) rmultinom(n=1, size=1, prob=probs[y,((x-1)*3+1):(x*3)])
Pred.XgivenG_16 <-sapply(1:Q, function(x) sapply(1:K, function(y) f(x,y)))

probs <- predict(Model.XgivenG_17, cbind(G_values, rep(1,Q)))$"prob.test"
f <- function(x,y) rmultinom(n=1, size=1, prob=probs[y,((x-1)*3+1):(x*3)])
Pred.XgivenG_17 <-sapply(1:Q, function(x) sapply(1:K, function(y) f(x,y)))

probs <- predict(Model.XgivenG_18, cbind(G_values, rep(1,Q)))$"prob.test"
f <- function(x,y) rmultinom(n=1, size=1, prob=probs[y,((x-1)*4+1):(x*4)])
Pred.XgivenG_18 <-sapply(1:Q, function(x) sapply(1:K, function(y) f(x,y)))

probs <- predict(Model.XgivenG_19, cbind(G_values, rep(1,Q)))$"prob.test"
f <- function(x,y) rmultinom(n=1, size=1, prob=probs[y,((x-1)*4+1):(x*4)])
Pred.XgivenG_19 <-sapply(1:Q, function(x) sapply(1:K, function(y) f(x,y)))

probs <- predict(Model.XgivenG_20, cbind(G_values, rep(1,Q)))$"prob.test"
f <- function(x,y) rmultinom(n=1, size=1, prob=probs[y,((x-1)*4+1):(x*4)])
Pred.XgivenG_20 <-sapply(1:Q, function(x) sapply(1:K, function(y) f(x,y)))

probs <- predict(Model.XgivenG_21, cbind(G_values, rep(1,Q)))$"prob.test"
f <- function(x,y) rmultinom(n=1, size=1, prob=probs[y,((x-1)*4+1):(x*4)])
Pred.XgivenG_21 <-sapply(1:Q, function(x) sapply(1:K, function(y) f(x,y)))

probs <- predict(Model.XgivenG_22, cbind(G_values, rep(1,Q)))$"prob.test"
f <- function(x,y) rmultinom(n=1, size=1, prob=probs[y,((x-1)*3+1):(x*3)])
Pred.XgivenG_22 <-sapply(1:Q, function(x) sapply(1:K, function(y) f(x,y)))

### Y given X
Model.Y1givenX <- wbart(x.train=X, y.train=data[,colnames(data) %in% "adult_income_log"], ndpost=M)
Pred.Y1givenX <- lapply(1:Q, function(x){
  predict(Model.Y1givenX, cbind(G_values[x], rep(1, Q), Pred.XgivenG_1[,x], Pred.XgivenG_2[,x], Pred.XgivenG_3[,x], 
                               Pred.XgivenG_4[,x], Pred.XgivenG_5[,x], Pred.XgivenG_6[,x], Pred.XgivenG_7[,x],
                               Pred.XgivenG_8[,x], Pred.XgivenG_9[,x], Pred.XgivenG_10[,x], Pred.XgivenG_11[,x],
                               Pred.XgivenG_12[,x], Pred.XgivenG_13[,x], 
                               Pred.XgivenG_14[seq(1,nrow(Pred.XgivenG_14),by=nrow(Pred.XgivenG_14)/K),x],
                               Pred.XgivenG_14[seq(2,nrow(Pred.XgivenG_14),by=nrow(Pred.XgivenG_14)/K),x],
                               Pred.XgivenG_14[seq(3,nrow(Pred.XgivenG_14),by=nrow(Pred.XgivenG_14)/K),x],
                               Pred.XgivenG_14[seq(4,nrow(Pred.XgivenG_14),by=nrow(Pred.XgivenG_14)/K),x],
                               Pred.XgivenG_15[seq(1,nrow(Pred.XgivenG_15),by=nrow(Pred.XgivenG_15)/K),x],
                               Pred.XgivenG_15[seq(2,nrow(Pred.XgivenG_15),by=nrow(Pred.XgivenG_15)/K),x],
                               Pred.XgivenG_15[seq(3,nrow(Pred.XgivenG_15),by=nrow(Pred.XgivenG_15)/K),x],
                               Pred.XgivenG_15[seq(4,nrow(Pred.XgivenG_15),by=nrow(Pred.XgivenG_15)/K),x],
                               Pred.XgivenG_15[seq(5,nrow(Pred.XgivenG_15),by=nrow(Pred.XgivenG_15)/K),x],
                               Pred.XgivenG_15[seq(6,nrow(Pred.XgivenG_15),by=nrow(Pred.XgivenG_15)/K),x],
                               Pred.XgivenG_15[seq(7,nrow(Pred.XgivenG_15),by=nrow(Pred.XgivenG_15)/K),x],
                               Pred.XgivenG_16[seq(1,nrow(Pred.XgivenG_16),by=nrow(Pred.XgivenG_16)/K),x],
                               Pred.XgivenG_16[seq(2,nrow(Pred.XgivenG_16),by=nrow(Pred.XgivenG_16)/K),x],
                               Pred.XgivenG_16[seq(3,nrow(Pred.XgivenG_16),by=nrow(Pred.XgivenG_16)/K),x],
                               Pred.XgivenG_17[seq(1,nrow(Pred.XgivenG_17),by=nrow(Pred.XgivenG_17)/K),x],
                               Pred.XgivenG_17[seq(2,nrow(Pred.XgivenG_17),by=nrow(Pred.XgivenG_17)/K),x],
                               Pred.XgivenG_17[seq(3,nrow(Pred.XgivenG_17),by=nrow(Pred.XgivenG_17)/K),x],
                               Pred.XgivenG_18[seq(1,nrow(Pred.XgivenG_18),by=nrow(Pred.XgivenG_18)/K),x],
                               Pred.XgivenG_18[seq(2,nrow(Pred.XgivenG_18),by=nrow(Pred.XgivenG_18)/K),x],
                               Pred.XgivenG_18[seq(3,nrow(Pred.XgivenG_18),by=nrow(Pred.XgivenG_18)/K),x],
                               Pred.XgivenG_18[seq(4,nrow(Pred.XgivenG_18),by=nrow(Pred.XgivenG_18)/K),x],
                               Pred.XgivenG_19[seq(1,nrow(Pred.XgivenG_19),by=nrow(Pred.XgivenG_19)/K),x],
                               Pred.XgivenG_19[seq(2,nrow(Pred.XgivenG_19),by=nrow(Pred.XgivenG_19)/K),x],
                               Pred.XgivenG_19[seq(3,nrow(Pred.XgivenG_19),by=nrow(Pred.XgivenG_19)/K),x],
                               Pred.XgivenG_19[seq(4,nrow(Pred.XgivenG_19),by=nrow(Pred.XgivenG_19)/K),x],
                               Pred.XgivenG_20[seq(1,nrow(Pred.XgivenG_20),by=nrow(Pred.XgivenG_20)/K),x],
                               Pred.XgivenG_20[seq(2,nrow(Pred.XgivenG_20),by=nrow(Pred.XgivenG_20)/K),x],
                               Pred.XgivenG_20[seq(3,nrow(Pred.XgivenG_20),by=nrow(Pred.XgivenG_20)/K),x],
                               Pred.XgivenG_20[seq(4,nrow(Pred.XgivenG_20),by=nrow(Pred.XgivenG_20)/K),x],
                               Pred.XgivenG_21[seq(1,nrow(Pred.XgivenG_21),by=nrow(Pred.XgivenG_21)/K),x],
                               Pred.XgivenG_21[seq(2,nrow(Pred.XgivenG_21),by=nrow(Pred.XgivenG_21)/K),x],
                               Pred.XgivenG_21[seq(3,nrow(Pred.XgivenG_21),by=nrow(Pred.XgivenG_21)/K),x],
                               Pred.XgivenG_21[seq(4,nrow(Pred.XgivenG_21),by=nrow(Pred.XgivenG_21)/K),x],
                               Pred.XgivenG_22[seq(1,nrow(Pred.XgivenG_22),by=nrow(Pred.XgivenG_22)/K),x],
                               Pred.XgivenG_22[seq(2,nrow(Pred.XgivenG_22),by=nrow(Pred.XgivenG_22)/K),x],
                               Pred.XgivenG_22[seq(3,nrow(Pred.XgivenG_22),by=nrow(Pred.XgivenG_22)/K),x]))
  })

### Summarize the results over MC draws 
Over_MC <- lapply(1:Q, function(x) {
  mean_MC_x <- rowMeans(Pred.Y1givenX[[x]]) # This takes average over MC draws within each BART posterior draw and each G value
  sd_MC <- rowSums((Pred.Y1givenX[[x]] - mean_MC_x)^2/(K*(K-1)))
  return(list(mean_MC_x, sd_MC))
  })

### Measuring MC variation
mean_sd_MC <- sapply(1:Q, function(x) {
  mean(Over_MC[[x]][[2]])   # mean sd_MC over BART draws and within a G value
})
summary(mean_sd_MC)  # This is the measure of MC variation


var_draw <- sapply(1:Q, function(x) {
  var(Over_MC[[x]][[1]])   # sample variance over BART draws and within a G value
})
mean_sd_MC/var_draw # MC variation relative to posterior variance for each G value
mean(mean_sd_MC)  # take average over G values. This is an overall measure of MC variation. 
# And it is generic in the sense that it does not depend on specific parametrization of E(Y_1|G)

### get M number of E(Y_1|G)
Y_1G <- lapply(1:M, function(x) {  # xth element of the list stores Q values of E(Y_1|G) for the xth posterior draw
  sapply(1:Q, function(y) {   # Y as a function of G for xth posterior draw
    Over_MC[[y]][[1]][x] # The first index is for G value, the second for mean_MC vs sd_MC, the third for posterior draw
  })
})

### Summarize the results over BART draws
Y_1G_dist <- lapply(1:Q, function(x) {  
  ave <- mean(Over_MC[[x]][[1]])   # mean over BART draws for the xth G value
  inter <- quantile(Over_MC[[x]][[1]], probs=c(0.025, 0.975))
  return(c(ave, inter))
})
Y_1G_dist <- t(as.data.frame(Y_1G_dist))
colnames(Y_1G_dist) <- c("ave","lower","upper")
Y_1G_dist <- as.data.frame(Y_1G_dist)
Y_1G_dist$G_values <- G_values

nonpa_plot <- ggplot(Y_1G_dist, aes(x=G_values, y=ave)) +
  geom_point(size=1.5) +
  geom_smooth(se = FALSE, aes(color='Y_1|G')) +
  geom_smooth(data=data, aes(x=parental_income_log, y=adult_income_log, color='Y|G'), se = FALSE) +
  geom_smooth(data=data[data$college==1,], aes(x=parental_income_log, y=adult_income_log, color='Y|D=1,G'), se = FALSE) +
  scale_color_manual(breaks=c('Y_1|G', 'Y|G', 'Y|D=1,G'),
                     values=c('Y_1|G'='red', 'Y|G'='blue', 'Y|D=1,G'='green4')) +
  geom_errorbar(width=.01, alpha=0.3, aes(ymin=lower, ymax=upper)) +
  xlab("G values")+
  xlim(min(G_values), max(G_values)) +
  theme(axis.title.y = element_blank(), axis.text.x = element_text(size=10))

### Parametric summaries
## linear parametrization
linear <- t(as.data.frame(lapply(1:M, function(x) {
    coef(lm(Y_1G[[x]] ~ G_values))
  }), col.names=1:M, row.names=c("intercept","slope")) )

ggdata <- as.data.frame(cbind(G_values, seq(min(sapply(Y_1G, min)), max(sapply(Y_1G, max)), length.out=Q)))
colnames(ggdata) <- c("x","y")
colMeans(linear)
quantile(linear[,1], probs=c(0.025, 0.975))
quantile(linear[,2], probs=c(0.025, 0.975))

linear_plot <- ggplot() + xlim(min(G_values), max(G_values)) 
add <- function(y) { geom_function(fun=function(x) 
{
  linear[y,1] + linear[y,2]*x
}, alpha=0.1)
}
linear_plot <- linear_plot + 
  map(751:1000, add) +
  geom_function(fun=function(x) 
    coef(lm(adult_income_log~parental_income_log, data))[1]+coef(lm(adult_income_log~parental_income_log, data))[2]*x, 
    aes(color='Y|G'), size=1.5) +
  geom_function(fun=function(x) mean(linear[,1])+mean(linear[,2])*x, aes(color='Y_1|G'), size=1.5) +
  scale_color_manual(breaks=c('Y_1|G', 'Y|G'),
                     values=c('Y_1|G'='firebrick', 'Y|G'='blue'))
linear_plot

## quadratic parametrization
G_values_sqr <- G_values^2
quadratic <- t(as.data.frame(lapply(1:M, function(x) {
  coef(lm(Y_1G[[x]] ~ G_values + G_values_sqr))
}), col.names=1:M, row.names=c("intercept","slope1","slope2")) )
colMeans(quadratic)
quantile(quadratic[,1], probs=c(0.025, 0.975))
quantile(quadratic[,2], probs=c(0.025, 0.975))
quantile(quadratic[,3], probs=c(0.025, 0.975))

post_mean <- function(x) mean(quadratic[,1])+mean(quadratic[,2])*x+mean(quadratic[,3])*x^2
data$parental_income_log_sqr <- data$parental_income_log^2
original <- function(x) {
  coef(lm(adult_income_log~parental_income_log+parental_income_log_sqr, data))[1] +
    coef(lm(adult_income_log~parental_income_log+parental_income_log_sqr, data))[2]*x +
    coef(lm(adult_income_log~parental_income_log+parental_income_log_sqr, data))[3]*x^2}
# Note that when iteratively adding geom_function, I need to use the `map' function from purrr package. 
# For loops don't work. See https://community.rstudio.com/t/plotting-multiple-function-curves-in-a-single-plot-using-ggplot-in-a-user-defined-function/92061/6
quar_plot <- ggplot() + xlim(min(G_values), max(G_values)) 
add <- function(y) { geom_function(fun=function(x) 
  {
  coef(lm(Y_1G[[y]] ~ G_values + G_values_sqr))[1] + coef(lm(Y_1G[[y]] ~ G_values + G_values_sqr))[2]*x + coef(lm(Y_1G[[y]] ~ G_values + G_values_sqr))[3]*x^2
  }, alpha=0.1)
}
quar_plot <- quar_plot + 
  map(751:1000, add) +
  geom_function(fun=original, aes(color='Y|G'), size=1.5) +
  geom_function(fun=post_mean, aes(color='Y_1|G'), size=1.5) +
  scale_color_manual(breaks=c('Y_1|G', 'Y|G'),
                     values=c('Y_1|G'='firebrick', 'Y|G'='blue'))
quar_plot

##

